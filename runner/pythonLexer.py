# Generated from python.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,41,296,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,
        10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,
        17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,
        22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,3,25,161,8,25,1,25,1,25,1,
        26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,
        28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,
        30,1,31,1,31,5,31,194,8,31,10,31,12,31,197,9,31,1,31,1,31,1,31,5,
        31,202,8,31,10,31,12,31,205,9,31,1,31,3,31,208,8,31,1,32,1,32,5,
        32,212,8,32,10,32,12,32,215,9,32,1,33,3,33,218,8,33,1,33,4,33,221,
        8,33,11,33,12,33,222,1,33,1,33,4,33,227,8,33,11,33,12,33,228,1,34,
        3,34,232,8,34,1,34,4,34,235,8,34,11,34,12,34,236,1,35,1,35,1,35,
        1,35,1,36,1,36,1,36,1,36,1,36,1,36,5,36,249,8,36,10,36,12,36,252,
        9,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,
        5,37,266,8,37,10,37,12,37,269,9,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,38,1,38,5,38,279,8,38,10,38,12,38,282,9,38,1,38,1,38,1,39,1,39,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,4,195,203,250,267,0,
        41,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,1,0,7,1,0,34,34,1,0,39,39,
        3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,1,
        0,32,32,2,0,10,10,13,13,310,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,1,83,1,0,0,0,3,85,1,0,0,0,5,
        88,1,0,0,0,7,90,1,0,0,0,9,95,1,0,0,0,11,101,1,0,0,0,13,107,1,0,0,
        0,15,112,1,0,0,0,17,117,1,0,0,0,19,123,1,0,0,0,21,125,1,0,0,0,23,
        127,1,0,0,0,25,129,1,0,0,0,27,131,1,0,0,0,29,133,1,0,0,0,31,135,
        1,0,0,0,33,137,1,0,0,0,35,139,1,0,0,0,37,141,1,0,0,0,39,143,1,0,
        0,0,41,145,1,0,0,0,43,148,1,0,0,0,45,151,1,0,0,0,47,154,1,0,0,0,
        49,156,1,0,0,0,51,160,1,0,0,0,53,164,1,0,0,0,55,170,1,0,0,0,57,175,
        1,0,0,0,59,180,1,0,0,0,61,185,1,0,0,0,63,207,1,0,0,0,65,209,1,0,
        0,0,67,217,1,0,0,0,69,231,1,0,0,0,71,238,1,0,0,0,73,242,1,0,0,0,
        75,259,1,0,0,0,77,276,1,0,0,0,79,285,1,0,0,0,81,287,1,0,0,0,83,84,
        5,61,0,0,84,2,1,0,0,0,85,86,5,105,0,0,86,87,5,102,0,0,87,4,1,0,0,
        0,88,89,5,58,0,0,89,6,1,0,0,0,90,91,5,101,0,0,91,92,5,108,0,0,92,
        93,5,105,0,0,93,94,5,102,0,0,94,8,1,0,0,0,95,96,5,101,0,0,96,97,
        5,108,0,0,97,98,5,115,0,0,98,99,5,101,0,0,99,100,5,58,0,0,100,10,
        1,0,0,0,101,102,5,119,0,0,102,103,5,104,0,0,103,104,5,105,0,0,104,
        105,5,108,0,0,105,106,5,101,0,0,106,12,1,0,0,0,107,108,5,102,0,0,
        108,109,5,111,0,0,109,110,5,114,0,0,110,111,5,32,0,0,111,14,1,0,
        0,0,112,113,5,32,0,0,113,114,5,105,0,0,114,115,5,110,0,0,115,116,
        5,32,0,0,116,16,1,0,0,0,117,118,5,114,0,0,118,119,5,97,0,0,119,120,
        5,110,0,0,120,121,5,103,0,0,121,122,5,101,0,0,122,18,1,0,0,0,123,
        124,5,40,0,0,124,20,1,0,0,0,125,126,5,44,0,0,126,22,1,0,0,0,127,
        128,5,41,0,0,128,24,1,0,0,0,129,130,5,91,0,0,130,26,1,0,0,0,131,
        132,5,93,0,0,132,28,1,0,0,0,133,134,5,47,0,0,134,30,1,0,0,0,135,
        136,5,37,0,0,136,32,1,0,0,0,137,138,5,42,0,0,138,34,1,0,0,0,139,
        140,5,43,0,0,140,36,1,0,0,0,141,142,5,45,0,0,142,38,1,0,0,0,143,
        144,5,60,0,0,144,40,1,0,0,0,145,146,5,60,0,0,146,147,5,61,0,0,147,
        42,1,0,0,0,148,149,5,61,0,0,149,150,5,61,0,0,150,44,1,0,0,0,151,
        152,5,62,0,0,152,153,5,61,0,0,153,46,1,0,0,0,154,155,5,62,0,0,155,
        48,1,0,0,0,156,157,5,33,0,0,157,158,5,61,0,0,158,50,1,0,0,0,159,
        161,5,13,0,0,160,159,1,0,0,0,160,161,1,0,0,0,161,162,1,0,0,0,162,
        163,5,10,0,0,163,52,1,0,0,0,164,165,5,32,0,0,165,166,5,97,0,0,166,
        167,5,110,0,0,167,168,5,100,0,0,168,169,5,32,0,0,169,54,1,0,0,0,
        170,171,5,32,0,0,171,172,5,111,0,0,172,173,5,114,0,0,173,174,5,32,
        0,0,174,56,1,0,0,0,175,176,5,110,0,0,176,177,5,111,0,0,177,178,5,
        116,0,0,178,179,5,32,0,0,179,58,1,0,0,0,180,181,5,84,0,0,181,182,
        5,114,0,0,182,183,5,117,0,0,183,184,5,101,0,0,184,60,1,0,0,0,185,
        186,5,70,0,0,186,187,5,97,0,0,187,188,5,108,0,0,188,189,5,115,0,
        0,189,190,5,101,0,0,190,62,1,0,0,0,191,195,5,34,0,0,192,194,8,0,
        0,0,193,192,1,0,0,0,194,197,1,0,0,0,195,196,1,0,0,0,195,193,1,0,
        0,0,196,198,1,0,0,0,197,195,1,0,0,0,198,208,5,34,0,0,199,203,5,39,
        0,0,200,202,8,1,0,0,201,200,1,0,0,0,202,205,1,0,0,0,203,204,1,0,
        0,0,203,201,1,0,0,0,204,206,1,0,0,0,205,203,1,0,0,0,206,208,5,39,
        0,0,207,191,1,0,0,0,207,199,1,0,0,0,208,64,1,0,0,0,209,213,7,2,0,
        0,210,212,7,3,0,0,211,210,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,
        0,213,214,1,0,0,0,214,66,1,0,0,0,215,213,1,0,0,0,216,218,5,45,0,
        0,217,216,1,0,0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,221,7,4,0,
        0,220,219,1,0,0,0,221,222,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,
        0,223,224,1,0,0,0,224,226,5,46,0,0,225,227,7,4,0,0,226,225,1,0,0,
        0,227,228,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,68,1,0,0,0,
        230,232,5,45,0,0,231,230,1,0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,
        233,235,7,4,0,0,234,233,1,0,0,0,235,236,1,0,0,0,236,234,1,0,0,0,
        236,237,1,0,0,0,237,70,1,0,0,0,238,239,7,5,0,0,239,240,1,0,0,0,240,
        241,6,35,0,0,241,72,1,0,0,0,242,243,5,39,0,0,243,244,5,39,0,0,244,
        245,5,39,0,0,245,250,1,0,0,0,246,249,3,73,36,0,247,249,9,0,0,0,248,
        246,1,0,0,0,248,247,1,0,0,0,249,252,1,0,0,0,250,251,1,0,0,0,250,
        248,1,0,0,0,251,253,1,0,0,0,252,250,1,0,0,0,253,254,5,39,0,0,254,
        255,5,39,0,0,255,256,5,39,0,0,256,257,1,0,0,0,257,258,6,36,0,0,258,
        74,1,0,0,0,259,260,5,34,0,0,260,261,5,34,0,0,261,262,5,34,0,0,262,
        267,1,0,0,0,263,266,3,75,37,0,264,266,9,0,0,0,265,263,1,0,0,0,265,
        264,1,0,0,0,266,269,1,0,0,0,267,268,1,0,0,0,267,265,1,0,0,0,268,
        270,1,0,0,0,269,267,1,0,0,0,270,271,5,34,0,0,271,272,5,34,0,0,272,
        273,5,34,0,0,273,274,1,0,0,0,274,275,6,37,0,0,275,76,1,0,0,0,276,
        280,5,35,0,0,277,279,8,6,0,0,278,277,1,0,0,0,279,282,1,0,0,0,280,
        278,1,0,0,0,280,281,1,0,0,0,281,283,1,0,0,0,282,280,1,0,0,0,283,
        284,6,38,0,0,284,78,1,0,0,0,285,286,5,9,0,0,286,80,1,0,0,0,287,288,
        5,60,0,0,288,289,5,68,0,0,289,290,5,69,0,0,290,291,5,68,0,0,291,
        292,5,69,0,0,292,293,5,78,0,0,293,294,5,84,0,0,294,295,5,62,0,0,
        295,82,1,0,0,0,16,0,160,195,203,207,213,217,222,228,231,236,248,
        250,265,267,280,1,6,0,0
    ]

class pythonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    NL = 26
    AND = 27
    OR = 28
    NOT = 29
    TRUE = 30
    FALSE = 31
    STRING = 32
    TERM = 33
    FLOAT = 34
    DIGIT = 35
    WS = 36
    BLOCKCOMMENT = 37
    BLOCKCOMMENT2 = 38
    LINECOMMENT = 39
    INDENT = 40
    DEDENT = 41

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'if'", "':'", "'elif'", "'else:'", "'while'", "'for '", 
            "' in '", "'range'", "'('", "','", "')'", "'['", "']'", "'/'", 
            "'%'", "'*'", "'+'", "'-'", "'<'", "'<='", "'=='", "'>='", "'>'", 
            "'!='", "' and '", "' or '", "'not '", "'True'", "'False'", 
            "'\\t'", "'<DEDENT>'" ]

    symbolicNames = [ "<INVALID>",
            "NL", "AND", "OR", "NOT", "TRUE", "FALSE", "STRING", "TERM", 
            "FLOAT", "DIGIT", "WS", "BLOCKCOMMENT", "BLOCKCOMMENT2", "LINECOMMENT", 
            "INDENT", "DEDENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "NL", "AND", 
                  "OR", "NOT", "TRUE", "FALSE", "STRING", "TERM", "FLOAT", 
                  "DIGIT", "WS", "BLOCKCOMMENT", "BLOCKCOMMENT2", "LINECOMMENT", 
                  "INDENT", "DEDENT" ]

    grammarFileName = "python.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    indent_stack = [0]

    pending_tokens = []

    def nextToken(self):
        token = super().nextToken()

        if token.type == self.NL:
        
            new_indent = 0
            while self._input.LA(1) == ord('\t'):
                new_indent += 1
                self._input.consume()
                
            space_count = 0
            while self._input.LA(1) == ord(' '):
                space_count += 1
                self._input.consume()

            new_indent += space_count // 4

            if space_count % 4 != 0:
                raise ValueError("Indentation error: spaces not multiple of 4")

            current_indent = self.indent_stack[-1] if self.indent_stack else 0
            
            if new_indent > current_indent:
                # Create indent for each tab
                for i in range(0, new_indent - current_indent):
                    indent_token = self._factory.create(
                        self._tokenFactorySourcePair, 
                        self.INDENT, 
                        ' ' * new_indent, 
                        self._channel, 
                        token.start, 
                        token.stop, 
                        token.line, 
                        token.column
                    )
                    self.indent_stack.append(new_indent)
                    self.pending_tokens.append(indent_token)
            
            elif new_indent < current_indent:
                # Create dedent tokens for each previous indent that is greater than the new indent
                while self.indent_stack and self.indent_stack[-1] > new_indent:
                    self.indent_stack.pop()

                    dedent_token = self._factory.create(
                        self._tokenFactorySourcePair, 
                        self.DEDENT, 
                        '', 
                        self._channel, 
                        token.start, 
                        token.stop, 
                        token.line, 
                        token.column
                    )
                    
                    self.pending_tokens.append(dedent_token)
        
        if token.type == Token.EOF:
            while self.indent_stack and self.indent_stack[-1] > 0:
                self.indent_stack.pop()
                dedent_token = self._factory.create(
                    self._tokenFactorySourcePair,
                    self.DEDENT,
                    '',
                    self._channel,
                    token.start,
                    token.stop,
                    token.line,
                    token.column
                )
                self.pending_tokens.append(dedent_token)
        
        self.pending_tokens.append(token)

        return self.pending_tokens.pop(0)


